set.seed(1)
n=(100)
rm(list=ls())
rm(list=ls())
set.seed(1)
n=(100)
n=(100)
x_1 <- rnorm(n,mean=3,sd=sqrt(6))
x_2 <-rnorm(n,mean=2,sd=sqrt(4))
epsilon <- rnorm(n,mean=0,sd=sqrt(100))
y <-2+3.5*x_1-9.2*x_2+epsilon
model4c <- lm(y ~x_1+x_2)
summary(model4c)
lm(y~x_1+x_2)$coefficients
set.seed(1)
n=100
M=1000
estimates_hat <- matrix( , nrow=M, ncol=3)
for (i in 1:M){
x_1hat <- rnorm(n,mean=3,sd=sqrt(6))
x_2hat <-rnorm(n,mean=2,sd=sqrt(4))
epsilonhat <- rnorm(n,mean=0,sd=sqrt(100))
yhat <-2+3.5*x_1hat-9.2*x_2hat+epsilonhat
model4c_hat <- lm(yhat ~x_1hat+x_2hat)
summary(model4c_hat)
estimates_hat[i, ]<-coef(model4c_hat)
}
summary(model4c_hat)
colnames(estimates_hat) <-c("Intercept","Beta1_hat","Beta2_hat" )
lm(yhat~x_1hat+x_2hat)$coefficients
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta1_hat"
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for Beta1_hat from 1000 iterations",
xlab = "beta1_hat",
col= "blue")
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta2_hat"
hist(estimates_hat[, "Beta2_hat"],
main="Sampling Distribution from 1000 iterations",
xlab = "Beta2_hat",
col= "green")
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta1_hat"
hist(estimates_hat[ , "Beta1_hat"],
main="Sampling Distribution from for Beta1_hat from 1000 iterations",
xlab = "Beta1_hat",
col= "blue")
abline(v= mean(estimates_hat[, "Beta1_hat"]),
col= "red",
lwd=2,
lty="dashed")
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta2_hat"
hist(estimates_hat[ , "Beta2_hat"],
main="Sampling Distribution from for Beta2_hat from 1000 iterations",
xlab = x_2hat,
col= "green")
abline(v= mean(estimates_hat[, "Beta2_hat"]),
col= "red",
lwd=2,
lty="straight")
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta2_hat"
hist(estimates_hat[ , "Beta2_hat"],
main="Sampling Distribution from for Beta2_hat from 1000 iterations",
xlab = x_2hat,
col= "green")
abline(v= mean(estimates_hat[, "Beta2_hat"]),
col= "red",
lwd=2,
lty= "dashed")
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta2_hat"
hist(estimates_hat[ , "Beta2_hat"],
main="Sampling Distribution from for Beta2_hat from 1000 iterations",
xlab = "Beta2_hat",
col= "green")
abline(v= mean(estimates_hat[, "Beta2_hat"]),
col= "red",
lwd=2,
lty= "dashed")
#| eval = TRUE
#| echo = TRUE
set.seed(123)
n <- 25
x <- rnorm(n,mean=0.0,sd=1.0)
beta0 <- 1
beta1 <- 0
## x is irrelevant in this model, the data generating process is as follows:
dgp <- beta0 + beta1*x
## The residual is heteroskedastic by construction
e <- x^2*rnorm(n,mean=0.0,sd=1.0)
y <- dgp + e
#| eval: true
#| echo: true
set.seed(123)
n <- 25
x <- rnorm(n,mean=0.0,sd=1.0)
beta0 <- 1
beta1 <- 0
## x is irrelevant in this model, the data generating process is as follows:
dgp <- beta0 + beta1*x
## The residual is heteroskedastic by construction
e <- x^2*rnorm(n,mean=0.0,sd=1.0)
y <- dgp + e
lm(y~x)
OLS_Estimator <-lm(y~x)
summary(OLS_Estimator)
X <- cbind(1, x)
residuals <-resid(OLS_Estimator)
sigmasqr_hat <-sum(residuals^2/(n-2))
trasposeX.Xinv <-solve(t(X) %*% X)
VarianceMatrix <-sigmasqr_hat %*% trasposeX.Xinv
VarianceMatrix <-sigmasqr_hat * trasposeX.Xinv
beta2_se <-sqrt(VarianceMatrix[2,2])
summary(beta2_se)
model(beta2_se)
model.extract(beta2_se$std. error)
beta2_se <-sqrt(VarianceMatrix[2,2])
beta2_se
cbind(matrix= as.numeric(beta2_se), OLS_Estimator("x","Std. Error"))
cbind(matrix= as.numeric(beta2_se), coef(summary(OLS_Estimator("x","Std. Error"))))
cbind(matrix= as.numeric(beta2_se), coef(summary(OLS_Estimator)("x","Std. Error"))))
cbind(matrix= as.numeric(beta2_se), coef(summary(OLS_Estimator)("x","Std. Error")))
coef(summary(OLS_Estimator)("x","Std. Error"))
OLS_Estimator_SE <-coef(summary(OLS_Estimator)("x","Std. Error"))
coef(summary(OLS_Estimator))("x","Std. Error")
OLS_Estimator_SE <-coef(summary(OLS_Estimator))("x","Std. Error")
summary(OLS_Estimator)
summary(OLS_Estimator,"x""Std. Error")
summary(OLS_Estimator,"x","Std. Error")
summary(OLS_Estimator$coefficients$std. error
summary(OLS_Estimator$coefficients$std. error)
summary(OLS_Estimator$x$std. error)
beta2_se
summary(OLS_Estimator)
coef(summary(OLS_Estimator))["x", "Std. Error"]
cbind(matrix= as.numeric(beta2_se), coef(summary(OLS_Estimator))["x", "Std. Error"])
beta2_se
coef(summary(OLS_Estimator))["x", "Std. Error"]
cbind(matrix= as.numeric(beta2_se), coef(summary(OLS_Estimator))["x", "Std. Error"])
resid <-y-X%*% beta_hat2
White_X <- cbind(1,x)
transposeX.Xinv <-solve(t(X)%*%X)
resid_extract <-resid(OLS_Estimator)
# Transforming the residuals
resid_extract_hat <-diag(resid_extract^2)
White_resid <- t(White_X)%*% resid_extract_hat %*% White_X
CovWhite <- transposeX.Xinv %*% White_resid %*% transposeX.Xinv
White_SE_Beta2 <- sqrt(CovWhite[2,2])
White_SE_Beta2
coef(summary(OLS_Estimator))["x", "Std. Error"]
cbind(White_SE_Beta2, coef(summary(OLS_Estimator))["x", "Std. Error"])
colnames(cbind(White_SE_Beta2, coef(summary(OLS_Estimator))["x", "Std. Error"]) <-c("White standard Error", "OLS Standard Error"))
cbind(White_SE_Beta2, coef(summary(OLS_Estimator))["x", "Std. Error"])
cbind(White_SE_Beta2, colname(coef(summary(OLS_Estimator))["x", "Std. Error"]))
cbind(White_SE_Beta2, coef(summary(OLS_Estimator))["x", "Std. Error"])
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta1_hat"
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for Beta1_hat from 1000 iterations",
xlab = "beta1_hat",
col= "blue")
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta1_hat"
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for Beta1_hat from 1000 iterations",
xlab = "beta1_hat",
col= "blue")
?hist
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for Beta1_hat from 1000 iterations",
xlab = "beta1_hat",
col= "blue")
#| eval: true
#| echo: true
#| fig-cap: "Sampling distribution from 1000 iterations for Beta1_hat"
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for Beta1_hat from 1000 iterations",
xlab = "beta1_hat",
col= "blue")
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for $\hat{\beta_1}$ from 1000 iterations",
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for $\\hat{\beta_1}$ from 1000 iterations",
xlab = "Beta-1-hat",
col= "blue")
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for $\\hat{\\beta_1}$ from 1000 iterations",
xlab = "Beta-1-hat",
col= "blue")
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for Beta-1-hat from 1000 iterations",
xlab = "Beta-1-hat",
col= "blue")
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{\beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for $\hat{\beta_1} from 1000 iterations",
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{\beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for $\hat{\beta_1}$ from 1000 iterations",
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{\beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for $ \hat{\beta_1}$ from 1000 iterations",
#| eval: true
#| echo: true
#| fig-cap: $"Sampling distribution from 1000 iterations for \hat{\beta_1}"$
hist(estimates_hat[, "Beta1_hat"],
main="Sampling Distribution from for $ \\hat{\beta_1}$ from 1000 iterations",
xlab = "Beta-1-hat",
col= "blue")
